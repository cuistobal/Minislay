./tests/my_readline/my_rl_history.c:		return (free(new));
./tests/my_readline/main.c:			free(line);
./tests/my_readline/main.c:		return (perror("my_readline()"), free(line), -1);
./tests/initial_tokenization.c:            free(token);
./tests/initial_tokenization.c:        free(token);
./tests/initial_tokenization.c:        	free(temp->value);
./tests/initial_tokenization.c:        	free(temp);
./tests/test_exec_queue.c:		free(current->command);
./tests/test_exec_queue.c:		free(current);
./tests/containers/vectors/mistral_test.c:    free(array->data);
./tests/containers/vectors/main.c:			free((*vector)->size);
./tests/containers/vectors/main.c:			free((*vector)->head);
./tests/containers/vectors/main.c:		free(*vector);
./tests/expand.c:				free(temp);
./tests/expand.c:				free(expanded);
./tests/expand.c:				free(temp);
./tests/expand.c:				free(expanded);
./tests/expand.c:			free(assigned);
./utilities/avl_tree/avl_tree_utils2.c:		free(root);
./utilities/Libft/get_merged.c:			free(*temp);
./utilities/Libft/get_merged.c:			free(*temp);
./utilities/Libft/get_merged.c:		free(*expanded);
./utilities/Libft/ft_split.c:static char	**ft_free(char **dest, int words)
./utilities/Libft/ft_split.c:		free(dest[words]);
./utilities/Libft/ft_split.c:	free(dest);
./utilities/Libft/ft_split.c:			return (ft_free(dest, k));
./utilities/Libft/ft_split.c:		free(dest[i]);
./utilities/Libft/ft_split.c:	free(dest);
./utilities/free_utils.c:			free(array[count]);
./utilities/free_utils.c:		free(array);
./minitester/testeur/test.c:                free(line);
./minitester/utils/minislays_test_utils.c:    	free(queue);
./sources/builtins/export/tests/main.c:				free(key);
./sources/builtins/export/tests/main.c:			free(key);		//Not what I wanted to do but there is a small leak
./sources/builtins/export/tests/main.c:					free(find->data[1]);
./sources/builtins/export/tests/main.c:				free(key);
./sources/builtins/export/tests/avl_utils.c:		free(root->data[0]);
./sources/builtins/export/tests/avl_utils.c:		free(root->data[1]);
./sources/builtins/export/tests/avl_utils.c:		free(root);
./sources/execution/subshells/subshells.c:            free(*prompt);
./sources/execution/subshells/subshells.c:            	free(*prompt);
./sources/execution/subshells/subshells.c:			free(subshell_command);
./sources/execution/redirections/handle_here_doc.c:	//	free((*redirections)->value);
./sources/execution/redirections/handle_here_doc.c:					free(expanded);
./sources/execution/redirections/handle_here_doc.c:				free(line);
./sources/execution/redirections/handle_here_doc.c:			return (free(line), close(fd), true);
./sources/execution/processes/create_process.c:			free(temp);
./sources/execution/traverse_ast.c:		return (free(merged), merged = NULL, false);
./sources/execution/traverse_ast.c:		return (free(merged), merged = NULL,false);
./sources/execution/traverse_ast.c:		return (free(new), error_message(PIPE_FAILED), NULL);
./sources/execution/prepare_for_execution.c:		free(list->value);
./sources/execution/assignations/assignations.c:            free(assignation);
./sources/execution/commands/retrieve_path.c:	free(temp);
./sources/execution/commands/retrieve_path.c:		return (free(merged), false);
./sources/execution/commands/retrieve_path.c:	return (free(*command), *command = merged, true);
./sources/execution/commands/retrieve_path.c:			return (free(copy), true);
./sources/execution/commands/retrieve_path.c:	free(copy);
./sources/execution/expansions/expansions_improved.c:				free(buffer);
./sources/execution/expansions/bonus/globing.c:		free((*list)->value);
./sources/execution/expansions/bonus/globing.c:		return (free(value), false);
./sources/parsing/tokenization/tokenizer.c:			free(token);
./sources/parsing/tokenization/tokenizer.c:        	free(temp->value);
./sources/parsing/tokenization/tokenizer.c:        	free(temp);
./minishell.c:            free(user_input);
