STEP 1: Simple Command Expansion

	1. The words that the parser has marked as variable assignments (those preceding the
	command name) and redirections are saved for later processing.

	2. The words that are not variable assignments or redirections are expanded (see
	Section 3.5 [Shell Expansions], page 24). If any words remain after expansion, the
	first word is taken to be the name of the command and the remaining words are the
	arguments.

	3. Redirections are performed as described above (see Section 3.6 [Redirections], page 38).

	4. The text after the ‘=’ in each variable assignment undergoes tilde expansion, parameter
	expansion, command substitution, arithmetic expansion, and quote removal before
	being assigned to the variable.

STEP 2: Command Search and Execution

	1. If the command name contains no slashes, the shell attempts to locate it. If there exists
	a shell function by that name, that function is invoked as described in Section 3.3 [Shell
	Functions], page 19.

	2. If the name does not match a function, the shell searches for it in the list of shell
	builtins. If a match is found, that builtin is invoked.

	3. If the name is neither a shell function nor a builtin, and contains no slashes, Bash
	searches each element of $PATH for a directory containing an executable file by that
	name. Bash uses a hash table to remember the full pathnames of executable files to
	avoid multiple PATH searches (see the description of hash in Section 4.1 [Bourne Shell
	Builtins], page 48). A full search of the directories in $PATH is performed only if the
	command is not found in the hash table. If the search is unsuccessful, the shell searches
	for a defined shell function named command_not_found_handle. If that function exists, 
	it is invoked in a separate execution environment with the original command and the
	original command’s arguments as its arguments, and the function’s exit status becomes
	the exit status of that subshell. If that function is not defined, the shell prints an error
	message and returns an exit status of 127.

	4. If the search is successful, or if the command name contains one or more slashes, the
	shell executes the named program in a separate execution environment. Argument 0
	is set to the name given, and the remaining arguments to the command are set to the
	arguments supplied, if any.

	5. If this execution fails because the file is not in executable format, and the file is not
	a directory, it is assumed to be a shell script and the shell executes it as described in
	Section 3.8 [Shell Scripts], page 46.

	6. If the command was not begun asynchronously, the shell waits for the command to
	complete and collects its exit status.
